
services:
  db:
    image: postgres:15
    container_name: recsys_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-youruser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-yourpassword}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-youruser} -d ${POSTGRES_DB:-appdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recsys_network
  
  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_VER}
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    env_file:
      - .env
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - recsys_network
  

  redis:
    image: redis:7-alpine
    container_name: recsys_redis
    ports:
      - "6379:6379" 
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recsys_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        KERAS_BACKEND_ARG: ${KERAS_BACKEND:-tensorflow} 
    container_name: recsys_app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload 
   
    volumes:
      - ./app:/app/app 
      - ./models_store:/app/models_store 
      - ./data:/app/data 
      - ./scripts:/app/scripts
    ports:
      - "8000:8000"
    env_file:
      - .env 
    environment:
      PYTHONUNBUFFERED: 1 
      KERAS_BACKEND: ${KERAS_BACKEND:-tensorflow}
    
    
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - recsys_network

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        KERAS_BACKEND_ARG: ${KERAS_BACKEND:-tensorflow}
    container_name: recsys_worker
    command: celery -A app.worker.celery_app worker -l info -P solo 
    volumes:
      - ./app:/app/app
      - ./models_store:/app/models_store
      - ./data:/app/data
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      KERAS_BACKEND: ${KERAS_BACKEND:-tensorflow}
    depends_on:
      redis:
        condition: service_healthy
      db: 
        condition: service_healthy
      app:
        condition: service_started 
    networks:
      - recsys_network

  beat:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        KERAS_BACKEND_ARG: ${KERAS_BACKEND:-tensorflow}
    container_name: recsys_beat
    command: celery -A app.worker.celery_app beat -l info 
    
    volumes:
      - ./app:/app/app 
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      KERAS_BACKEND: ${KERAS_BACKEND:-tensorflow}
    depends_on:
      redis:
        condition: service_healthy
      worker: 
        condition: service_started
    networks:
      - recsys_network

volumes:
  postgres_data:
  pgadmin_data:

networks:
  recsys_network:
    driver: bridge